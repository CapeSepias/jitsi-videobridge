/*
 * Copyright @ 2018 - present 8x8, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jitsi.rtp.rtcp

import org.jitsi.rtp.extensions.clone
import org.jitsi.rtp.extensions.subBuffer
import org.jitsi.rtp.Packet
import org.jitsi.rtp.extensions.decreaseLimitBy
import org.jitsi.rtp.extensions.increaseLimitBy
import org.jitsi.rtp.extensions.put
import org.jitsi.rtp.rtcp.rtcpfb.RtcpFbPacket
import org.jitsi.rtp.rtcp.sdes.RtcpSdesPacket
import org.jitsi.rtp.util.BufferPool
import org.jitsi.rtp.util.ByteBufferUtils
import java.nio.ByteBuffer

/**
 * When performing crypto-related operations (authentication,
 * encryption/decryption) we need to be able to operate on
 * both the packet's entire data or its payload as a single
 * buffer (and, in the case of encryption/decryption, be able
 * to modify it).  These fields (particularly a modifiable payload)
 * are not exposed in RTCP packets (as we model the
 * individual fields of each RTCP packet type) so this class is
 * designed to be used in those cases.  It can be obtained by
 * calling [RtcpPacket#prepareForCrypto].
 */
//class RtcpPacketForCrypto(
//    header: RtcpHeader = RtcpHeader(),
//    backingBuffer: ByteBuffer = BufferPool.getBuffer(1500)
//) : RtcpPacket(header, backingBuffer) {
//
//    fun getPayload(): ByteBuffer {
//        // We assume that if the payload is retrieved that it's being modified
//        payloadModified()
//        return payload.duplicate()
//    }
//
//    override val sizeBytes: Int
//        get() = header.sizeBytes + payload.limit()
//
//    override fun shouldUpdateHeaderAndAddPadding(): Boolean = false
//
//    override fun clone(): Packet {
//        return RtcpPacketForCrypto(header.clone(), payload.clone())
//    }
//
//    override fun serializeTo(buf: ByteBuffer) {
//        super.serializeTo(buf)
//        payload.rewind()
//        buf.put(payload)
//    }
//}

abstract class RtcpPacket(
    val header: RtcpHeader = RtcpHeader(),
    private var backingBuffer: ByteBuffer = BufferPool.getBuffer(1500)
) : Packet() {
    private var dirty: Boolean = true

    // This should only be used for encryption/decryption
    val mutablePayload: ByteBuffer
        get() {
            if (dirty) {
                synchronizeDataToBackingBuffer()
            }
            return backingBuffer.subBuffer(header.sizeBytes, payloadDataSize)
        }

    val payload: ByteBuffer get() = mutablePayload.asReadOnlyBuffer()

    val _payload: ByteBuffer
        get() {
            if (dirty) {
//                serializePayloadDataInto(backingBuffer.subBuffer(header.sizeBytes))
            }
            return backingBuffer.subBuffer(header.sizeBytes)
        }

    protected abstract val payloadDataSize: Int

    protected fun synchronizeDataToBackingBuffer() {
        if (shouldUpdateHeaderAndAddPadding()) {
            updateHeaderFields()
        }
        serializeTo(backingBuffer.duplicate())
        backingBuffer.limit(sizeBytes)
        dirty = false
    }

    final override val sizeBytes: Int
        get() = header.sizeBytes + payloadDataSize

//    protected fun shrinkPayload(numBytesToRemoveFromEnd: Int) {
//        backingBuffer.decreaseLimitBy(numBytesToRemoveFromEnd)
//    }
//
//    fun addAuthTag(data: ByteBuffer) {
//        if (backingBuffer.capacity() > backingBuffer.limit() + data.limit()) {
//            val currentEndOfPayload = backingBuffer.limit()
//            backingBuffer.increaseLimitBy(data.limit())
//            backingBuffer.put(currentEndOfPayload, data)
//        }
//        else {
//            // we want to try and avoid this ever happening, so throw for now
//            throw Exception("Buffer too small! Buf capacity ${backingBuffer.capacity()}, needed ${backingBuffer.limit() + data.limit()}")
//        }
//    }

    protected fun cloneBackingBuffer(): ByteBuffer = backingBuffer.clone()

//    fun addSrtcpIndex(srtcpIndex: Int) {
//        if (backingBuffer.capacity() > backingBuffer.limit() + 4) {
//            val currentEndOfPayload = backingBuffer.limit()
//            backingBuffer.increaseLimitBy(4)
//            backingBuffer.putInt(currentEndOfPayload, srtcpIndex)
//        }
//        else {
//            // we want to try and avoid this ever happening, so throw for now
//            throw Exception("Buffer too small! Buf capacity ${backingBuffer.capacity()}, needed ${backingBuffer.limit() + 4}")
//        }
//    }


    /**
     * How many padding bytes are needed, if any
     * TODO: should sizeBytes be exposed publicly?  because it doesn't
     * include padding it could be misleading
     */
    private val numPaddingBytes: Int
        get() {
            //TODO: maybe we can only update this when dirty = true
            var paddingBytes = 0
            while ((sizeBytes + paddingBytes) % 4 != 0) {
                paddingBytes++
            }
            return paddingBytes
        }

    /**
     * [sizeBytes] MUST including padding (i.e. it should be 32-bit word aligned)
     */
    private fun calculateLengthFieldValue(sizeBytes: Int): Int {
        if (sizeBytes % 4 != 0) {
            throw Exception("Invalid RTCP size value")
        }
        return (sizeBytes / 4) - 1
    }

    private fun updateHeaderFields() {
        header.hasPadding = numPaddingBytes > 0
        header.length = calculateLengthFieldValue(this@RtcpPacket.sizeBytes + numPaddingBytes)
    }

    protected fun payloadModified() {
        //TODO: do we want to call updateHeaderFields here?
        dirty = true
    }

    @Suppress("UNCHECKED_CAST")
    fun <OtherType : RtcpPacket>toOtherRtcpPacketType(factory: (RtcpHeader, backingBuffer: ByteBuffer?) -> RtcpPacket): OtherType {
        // It's possible we could convert to another type without the buffer ever being
        // requested, meaning that backingBuffer could be in a default state (without
        // the limit being set correctly), so make sure we set it here.  Also make sure we synchronize
        // the header.
        if (dirty) {
            synchronizeDataToBackingBuffer()
        }
        return factory(header, backingBuffer) as OtherType
    }

    //NOTE: This method should almost NEVER be overridden by subclasses.  The exceptions
    // are the SRTCP-related classes, whose header values will be inconsistent with the data due to
    // the auth tag and SRTCP index (and it should not be padded)
    protected open fun shouldUpdateHeaderAndAddPadding(): Boolean = true

    final override fun getBuffer(): ByteBuffer {
        if (dirty || header.dirty) {
            val neededSize = if (shouldUpdateHeaderAndAddPadding()) sizeBytes + numPaddingBytes else sizeBytes
            backingBuffer = ByteBufferUtils.ensureCapacity(backingBuffer, neededSize)
            synchronizeDataToBackingBuffer()
        }
        return backingBuffer.duplicate()
    }

    override fun serializeTo(buf: ByteBuffer) {
        header.serializeTo(buf)
    }

    companion object {
        fun parse(buf: ByteBuffer): RtcpPacket {
            val bufStartPosition = buf.position()
            val packetType = RtcpHeader.getPacketType(buf)
            val packetLengthBytes = (RtcpHeader.getLength(buf) + 1) * 4
            val packet = when (packetType) {
//                RtcpSrPacket.PT -> RtcpSrPacket.fromBuffer(buf)
//                RtcpRrPacket.PT -> RtcpRrPacket.fromBuffer(buf)
//                RtcpSdesPacket.PT -> RtcpSdesPacket.fromBuffer(buf)
//                RtcpByePacket.PT -> RtcpByePacket.create(buf)
//                in RtcpFbPacket.PACKET_TYPES -> RtcpFbPacket.fromBuffer(buf)
                else -> throw Exception("Unsupported RTCP packet type $packetType")
            }
            if (buf.position() != bufStartPosition + packetLengthBytes) {
                throw Exception("Didn't parse until the end of the RTCP packet!")
            }
            return packet
        }
        fun addPadding(buf: ByteBuffer) {
            while (buf.position() % 4 != 0) {
                buf.put(0x00)
            }
        }

        fun consumePadding(buf: ByteBuffer) {
            while (buf.position() % 4 != 0) {
                buf.put(0x00)
            }
        }
    }
}
